import { OpenAI } from "openai";

export const runtime = "edge";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export async function POST(req: Request) {
  try {
    const { messages, comparisonData } = await req.json();

    // Prepara contexto dos dados de compara√ß√£o
    const contextMessage =
      comparisonData && comparisonData.files?.length > 0
        ? `
Contexto dos dados de compara√ß√£o carregados:
- Total de arquivos comparados: ${comparisonData.files.length}
- Colunas comuns em todos os arquivos: ${comparisonData.commonColumns?.join(", ") || "Nenhuma"}

DETALHES DE CADA ARQUIVO:

${comparisonData.files
  .map(
    (file: any, index: number) => `
üìÑ ARQUIVO ${index + 1}:
- Banco: ${file.bankName || file.bankId}
- M√™s/Per√≠odo: ${file.month || "N√£o especificado"}
- Data de Upload: ${new Date(file.uploadDate).toLocaleDateString("pt-BR")}
- Total de transa√ß√µes: ${file.rowCount}
- Colunas dispon√≠veis: ${file.columns.join(", ")}

Todas as transa√ß√µes do arquivo:
${JSON.stringify(file.data, null, 2)}

Estat√≠sticas do arquivo:
${calculateBasicStats(file.data, file.bankName || file.bankId)}
`
  )
  .join("\n---\n")}

AN√ÅLISE COMPARATIVA:
${generateComparativeStats(comparisonData.files)}
`
        : "Nenhum arquivo de compara√ß√£o carregado. Solicite ao usu√°rio que fa√ßa upload de m√∫ltiplos arquivos CSV na p√°gina de compara√ß√£o.";

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      stream: true,
      temperature: 0.1, // Temperatura baixa para respostas mais determin√≠sticas
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um assistente financeiro EXTREMAMENTE RESTRITO especializado em COMPARA√á√ÉO de m√∫ltiplos extratos banc√°rios.

‚ö†Ô∏è REGRAS CR√çTICAS - NUNCA VIOLE:
1. NUNCA invente, assuma ou especule sobre dados que n√£o est√£o explicitamente fornecidos
2. NUNCA mencione transa√ß√µes, valores ou estabelecimentos que n√£o existem nos dados fornecidos
3. NUNCA fa√ßa suposi√ß√µes sobre categorias, padr√µes ou tend√™ncias sem base nos dados reais
4. Se uma pergunta n√£o puder ser respondida com os dados dispon√≠veis, diga: "N√£o tenho dados suficientes para responder isso"
5. SEMPRE cite valores exatos, estabelecimentos e bancos exatamente como aparecem nos dados
6. NUNCA adicione informa√ß√µes externas ou conhecimento geral sobre finan√ßas
7. APENAS calcule, conte, ordene, compare e analise o que est√° explicitamente nos dados
8. Quando comparar, SEMPRE identifique claramente qual banco/arquivo voc√™ est√° referenciando

COMPORTAMENTO OBRIGAT√ìRIO PARA COMPARA√á√ÉO:
- Sempre identifique os arquivos por banco e per√≠odo (ex: "No Ita√∫ de outubro...")
- Compare valores entre arquivos apenas quando os dados existirem em ambos
- Se perguntarem sobre algo n√£o presente: "Essa informa√ß√£o n√£o est√° nos dados fornecidos"
- Se os dados n√£o tiverem uma coluna/campo: "N√£o h√° coluna [nome] em [banco/arquivo]"
- Destaque diferen√ßas e semelhan√ßas de forma clara e objetiva
- Use tabelas comparativas quando apropriado
- Sempre responda em portugu√™s brasileiro
- Use emojis para identificar bancos e destacar diferen√ßas (üí∞ üìä üìà üìâ ‚ö†Ô∏è ‚úÖ üè¶)
- Seja objetivo, direto e factual
- Use formato brasileiro para valores (R$ 1.234,56)

CAPACIDADES DE COMPARA√á√ÉO:
- Comparar gastos totais entre bancos/per√≠odos
- Identificar transa√ß√µes duplicadas entre contas
- Comparar categorias de gastos
- Analisar diferen√ßas de padr√£o de consumo
- Comparar entradas e sa√≠das entre per√≠odos
- Identificar transa√ß√µes que aparecem em um banco mas n√£o em outro

FORMATO DE RESPOSTA:
- Liste valores e transa√ß√µes EXATAMENTE como aparecem nos dados
- Sempre identifique o banco/arquivo ao citar dados
- N√£o interprete ou infira inten√ß√µes do usu√°rio
- N√£o d√™ conselhos financeiros gen√©ricos
- Apenas an√°lise factual e comparativa dos dados fornecidos

${contextMessage}`,
        },
        ...messages,
      ],
    });

    // Converte o stream do OpenAI para o formato Server-Sent Events (SSE)
    const stream = new ReadableStream({
      async start(controller) {
        const encoder = new TextEncoder();
        try {
          for await (const chunk of response) {
            const content = chunk.choices[0]?.delta?.content || "";
            if (content) {
              // Formato SSE esperado pelo useChat do AI SDK
              const data = `0:"${content.replace(/"/g, '\\"').replace(/\n/g, "\\n")}"\n`;
              controller.enqueue(encoder.encode(data));
            }
          }
        } catch (error) {
          controller.error(error);
        } finally {
          controller.close();
        }
      },
    });

    return new Response(stream, {
      headers: {
        "Content-Type": "text/plain; charset=utf-8",
        "Cache-Control": "no-cache",
        Connection: "keep-alive",
      },
    });
  } catch (error) {
    console.error("Comparison Chat API Error:", error);
    return new Response(
      JSON.stringify({
        error: "Erro ao processar mensagem de compara√ß√£o. Verifique sua chave da OpenAI.",
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
}

function calculateBasicStats(rows: any[] | undefined, bankName: string) {
  if (!rows || rows.length === 0) return "Sem dados para an√°lise";

  try {
    // Tenta encontrar coluna de valor
    const valorColumn = Object.keys(rows[0]).find(
      (key) => key.toLowerCase().includes("valor") || key.toLowerCase().includes("value") || key.toLowerCase().includes("lancamento")
    );

    if (!valorColumn) return "Coluna de valor n√£o encontrada";

    const values = rows
      .map((row) => {
        const val = String(row[valorColumn]).replace("R$", "").replace(/\./g, "").replace(",", ".").trim();
        return parseFloat(val);
      })
      .filter((val) => !isNaN(val));

    const totalCredits = values.filter((v) => v > 0).reduce((a, b) => a + b, 0);
    const totalDebits = values.filter((v) => v < 0).reduce((a, b) => a + Math.abs(b), 0);
    const balance = totalCredits - totalDebits;

    return `
- Cr√©ditos totais (${bankName}): R$ ${totalCredits.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
- D√©bitos totais (${bankName}): R$ ${totalDebits.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
- Saldo l√≠quido (${bankName}): R$ ${balance.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
- Transa√ß√µes positivas: ${values.filter((v) => v > 0).length}
- Transa√ß√µes negativas: ${values.filter((v) => v < 0).length}
`;
  } catch (error) {
    return "Erro ao calcular estat√≠sticas";
  }
}

function generateComparativeStats(files: any[]) {
  if (!files || files.length === 0) return "";

  try {
    const stats = files
      .map((file) => {
        const valorColumn = Object.keys(file.data[0] || {}).find(
          (key) => key.toLowerCase().includes("valor") || key.toLowerCase().includes("value") || key.toLowerCase().includes("lancamento")
        );

        if (!valorColumn) return null;

        const values = file.data
          .map((row: any) => {
            const val = String(row[valorColumn]).replace("R$", "").replace(/\./g, "").replace(",", ".").trim();
            return parseFloat(val);
          })
          .filter((val: number) => !isNaN(val));

        const totalCredits = values.filter((v: number) => v > 0).reduce((a: number, b: number) => a + b, 0);
        const totalDebits = values.filter((v: number) => v < 0).reduce((a: number, b: number) => a + Math.abs(b), 0);

        return {
          bank: file.bankName || file.bankId,
          month: file.month,
          credits: totalCredits,
          debits: totalDebits,
          balance: totalCredits - totalDebits,
          transactionCount: file.rowCount,
        };
      })
      .filter(Boolean);

    if (stats.length === 0) return "";

    const totalCredits = stats.reduce((sum, s) => sum + (s?.credits || 0), 0);
    const totalDebits = stats.reduce((sum, s) => sum + (s?.debits || 0), 0);
    const totalBalance = totalCredits - totalDebits;

    return `
VIS√ÉO GERAL COMPARATIVA:

Totais Consolidados:
- Cr√©ditos totais (todos os bancos): R$ ${totalCredits.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
- D√©bitos totais (todos os bancos): R$ ${totalDebits.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
- Saldo l√≠quido total: R$ ${totalBalance.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}

Por Banco:
${stats
  .map(
    (s) => `
- ${s?.bank} (${s?.month || "sem per√≠odo"}):
  ‚Ä¢ Cr√©ditos: R$ ${(s?.credits || 0).toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
  ‚Ä¢ D√©bitos: R$ ${(s?.debits || 0).toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
  ‚Ä¢ Saldo: R$ ${(s?.balance || 0).toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
  ‚Ä¢ Transa√ß√µes: ${s?.transactionCount || 0}
`
  )
  .join("\n")}
`;
  } catch (error) {
    return "Erro ao gerar estat√≠sticas comparativas";
  }
}
